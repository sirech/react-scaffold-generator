#!/usr/bin/env node

const inquirer = require('inquirer')
const program = require('commander')
const directories = require('./src/utils/directories.js')
const path = require('path')
const componentTask = require('./src/tasks/component.js')
const _ = require('lodash')
const { typeQuestion, functionalQuestion, nameQuestion } = require('./src/utils/component/questions.js')
const config = require('./package.json')

program
  .version(config.version)
  .option('-t, --type <type>', 'type of building block', /^(organism|molecule|atom)s$/i, 'molecules')
  .parse(process.argv)

const lastQuestion = (componentsPath, componentType) => {
  return inquirer.prompt([nameQuestion]).then(({ componentName }) => {
    return componentTask(componentsPath, componentName, componentType).then((componentsPath) => {
      console.log(`${componentName} in ${componentsPath} has been generated`)
    })
  })
}

const getInitialQuestions = () => {
  return [typeQuestion]
}

const determinePath = () => {
  const currentFolder = directories.resolveWorkingDir()
  const candidates = _.map(['', 'src'], (f) => path.resolve(currentFolder, f, program.type))
  const subFolder = _.find(candidates, directories.doesDirectoryExist)

  if (path.basename(currentFolder) === program.type) {
    return currentFolder
  } else if (subFolder) {
    return subFolder
  } else {
    throw Error('Could not determine path')
  }
}

inquirer.prompt(getInitialQuestions()).then(answers => {
  const { componentType } = answers
  const componentsPath = determinePath(answers)

  if (componentType === 'presentational') {
    return inquirer.prompt([functionalQuestion]).then(({ isStateful }) => {
      const componentType = isStateful ? 'component' : 'component_pure'
      return lastQuestion(componentsPath, componentType)
    })
  } else {
    return lastQuestion(componentsPath, 'component_container')
  }
}).catch(err => {
  console.error('[ERROR] ', err)
})
